package db;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStream;import java.sql.Connection;import java.sql.Date;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import jena.OwlFactory;import org.w3c.dom.NodeList;import util.Constant;import com.hp.hpl.jena.ontology.Individual;import com.hp.hpl.jena.ontology.OntClass;import com.hp.hpl.jena.ontology.OntModel;import com.hp.hpl.jena.rdf.model.Bag;import com.hp.hpl.jena.rdf.model.Model;import com.hp.hpl.jena.rdf.model.RDFList;import com.hp.hpl.jena.rdf.model.RDFNode;import com.hp.hpl.jena.rdf.model.ResIterator;import com.hp.hpl.jena.rdf.model.Resource;import com.hp.hpl.jena.rdf.model.SimpleSelector;import com.hp.hpl.jena.rdf.model.Statement;import com.hp.hpl.jena.rdf.model.StmtIterator;import com.hp.hpl.jena.util.iterator.ExtendedIterator;import com.hp.hpl.jena.vocabulary.VCARD;import exception.ConceptNotExistInModelException;public class OwlOperator {	/************************	 * the initial model location is set in the file Constant which locates in the util package.	 * @return	 */	public static ArrayList<Individual> getAllConcepts(){		OntModel model = OwlFactory.getOntOWLModel();		ArrayList <Individual> concepts = new ArrayList<Individual>();		OntClass concept = model.getOntClass(Constant.NS+"E_Concept");		Iterator <Individual>iter2 = model.listIndividuals();		while(iter2.hasNext()){			Individual indi= (Individual) iter2.next();			if(concept.equals(indi.getOntClass())){				concepts.add(indi);				System.out.println(indi.getLocalName());			}		}		return concepts;	}	public static ArrayList<Individual> getAllResources(){		OntModel model = OwlFactory.getOntOWLModel();		ArrayList <Individual> resources = new ArrayList<Individual>();		OntClass resource = model.getOntClass(Constant.NS+"E_Resource");		Iterator <Individual>iter2 = model.listIndividuals();		while(iter2.hasNext()){			Individual indi= (Individual) iter2.next();			if(indi==null)break;			if(resource.equals(indi.getOntClass())){				resources.add(indi);				System.out.println(indi.getLocalName());			}		}		return resources;	}	public static ArrayList<Individual> getPreConcepts(Resource concept,OntModel model) throws ConceptNotExistInModelException{		/*		if(!hasConcept(concept,model)){			throw new ConceptNotExistInModelException("the model doesn't contain the concept"+concept.getLocalName());		}*/		Resource ontConcept = model.getResource(Constant.NS+"RIA");		SimpleSelector selector = new SimpleSelector(concept, model.getProperty(Constant.NS+"is_post_concept_of"), (RDFNode)ontConcept);		StmtIterator iter = model.listStatements(selector);				ArrayList <Individual> concepts = new ArrayList<Individual>();		while(iter.hasNext()){			Statement s = iter.nextStatement();			System.out.println(s);			Individual indi= (Individual) iter.next();			System.out.println("ms");				concepts.add(indi);				System.out.println(indi.getLocalName());		}		return concepts;	}	public static boolean hasConcept(Individual concept,OntModel model){		Individual con = model.getIndividual(concept.getURI());		if(con ==null){			return false;		}		return true;	}		/*****************************************************************	 * Save the owl file to the database, save the file to the database	 * @param owl file id	 * @param file	 * @param the date when the file was saved	 * @return true/false	 * 	 */	public boolean saveOwlFile(String rid, File file,Date date){		try{			Connection con = DataFactory.getConnection();			FileInputStream fin = new FileInputStream(file);	        String sql = "insert into OwlFile values(?,?,?)";	        PreparedStatement stmt = con.prepareStatement(sql);	        stmt.setString(1,rid);	        stmt.setBinaryStream(2,fin);	        stmt.setDate(3, date);	        stmt.executeUpdate();	        stmt.close();	        fin.close();	        con.close();	        System.out.println("upload the file successfully");	        return true;		}catch(Exception e){			e.printStackTrace();			return false;		}	}	//read the blob data from the database, and write it to the File	public boolean getOwlFile(String rid,File file){		byte[] Buffer = new byte[4096]; 		try { 			Connection conn = DataFactory.getConnection(); 			PreparedStatement pstmt = conn.prepareStatement("select * from OwlFile where owl_id=?"); 			pstmt.setString(1,rid);			ResultSet rs = pstmt.executeQuery(); 			while(rs.next()){				FileOutputStream fos = new FileOutputStream(file); 				InputStream is = rs.getBinaryStream("owl_file"); 				int size = 0; 				while((size = is.read(Buffer)) != -1) { 					fos.write(Buffer,0,size); 				} 				fos.close();			}						rs.close();			pstmt.close();			conn.close();			return true;		}catch(Exception e) { 			System.out.println("[OutPutFile error : ]" + e.getMessage()); 			return false;		} 	}	public Date getOwlFileDate(String rid){		try { 			Connection conn = DataFactory.getConnection(); 			PreparedStatement pstmt = conn.prepareStatement("select * from OwlFile where owl_id=?"); 			pstmt.setString(1,rid);			ResultSet rs = pstmt.executeQuery(); 			Date date = new Date(20101216);			while(rs.next()){				date = rs.getDate("owl_date"); 			}			rs.close();			pstmt.close();			conn.close();			return date;		}catch(Exception e) { 			System.out.println("[OutPutFile error : ]" + e.getMessage()); 			return null;		} 	}	/**	 * @param args	 */	public static void main(String[] args) throws Exception {		OntModel model = OwlFactory.getOntOWLModel();		Resource ind = model.getResource(Constant.NS+"rdf");		ArrayList <Individual> results = getPreConcepts(ind,model);		System.out.println(results.size());	}}