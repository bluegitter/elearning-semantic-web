/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NavigatorConceptPane.java
 *
 * Created on 2011-3-5, 15:27:44
 */
package lp.navigator;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import lp.LPApp;
import lp.display.mytree.CheckNode;
import lp.display.mytree.CheckRenderer;
import ontology.EConcept;
import ontology.EPerformance;
import ontology.resources.ISCB_Resource;
import util.MethodConstant;

/**
 *
 * @author ghh
 */
public class NavigatorConceptPane extends javax.swing.JPanel {

    public ArrayList selectedNodesC = new ArrayList();
    public CheckNode rootC = null;
    private NavigatorDialog parent;
    public ArrayList<EPerformance> EPerformances = new ArrayList<EPerformance>();

    /** Creates new form NavigatorPane */
    public NavigatorConceptPane(NavigatorDialog parent) {
        this.parent = parent;
        parent.setTitle("初始化向导：选择正在学习的知识点");
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {
        for (int i = 0; i < this.selectedNodesC.size(); i++) {
            EPerformance ep = new EPerformance();
            String cid = selectedNodesC.get(i).toString();
            ep.setEConcept(LPApp.lpModel.getEConcept(cid));
            ep.setELearner(LPApp.getApplication().user.learner);
            ep.setId("performance_" + LPApp.getApplication().user.learner.getId() + "_" + cid);
            ep.setValue(-1f);
            ep.setDatetime(MethodConstant.getSysDate());
            EPerformances.add(ep);
        }

        //  parent.nodesP = EPerformances;
        parent.setNext(EPerformances);
        parent.setTitle("初始化向导：选择正在学习的知识点");
    }

    private void ignorButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        parent.setVisible(false);
        parent.dispose();
    }

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        this.parent.setPrevious();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EConcept cn = this.getRootConcept();
        rootC = addNodes(new CheckNode(cn), cn);
        JTree tree = new JTree(rootC);
        //use our CheckRenderer
        tree.setCellRenderer(new CheckRenderer());
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.addMouseListener(new NodeSelectionListener(tree));
        jScrollPane1 = new JScrollPane(tree);

        JButton nextButton = new JButton();
        nextButton.setBounds(507, 435,120,33); 
        nextButton.setText("下一步");
        this.add(nextButton);
        nextButton.grabFocus();
        nextButton.setVisible(true);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        JButton ignorButton = new JButton();
        ignorButton.setBounds(10, 435,120,33); 
        ignorButton.setText("跳过向导");
        this.add(ignorButton);
        ignorButton.setVisible(true);
        ignorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignorButtonActionPerformed(evt);
            }
        });

        JButton previousButton = new JButton();
        previousButton.setBounds(377, 435,120,33); 
        previousButton.setText("上一步");
        this.add(previousButton);
        previousButton.setVisible(true);
        previousButton.setEnabled(false);
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public EConcept getRootConcept() {
        EConcept rootConcept = new EConcept();
        rootConcept.setCid("Computer_Science");
        rootConcept.setName("软件工程");
        return rootConcept;
    }

    private CheckNode addNodes(CheckNode n, EConcept r) {

        ArrayList<EConcept> a = LPApp.getApplication().lpModel.getSonConcepts(r);
        ArrayList<ISCB_Resource> rList = new ArrayList<ISCB_Resource>();
        for (EConcept c : a) {
            //System.out.println(c.getCid() + c.getName() + "hahahahahaha");
            rList = LPApp.getApplication().lpModel.getEResourcesByEConcept(c);
            CheckNode child = null;
            if (rList.size() > 0) {
                child = new CheckNode(c);
                n.add(child);
                addNodes(child, c);
            }
        }
        return n;
    }

    class NodeSelectionListener extends MouseAdapter {

        JTree tree;

        NodeSelectionListener(JTree tree) {
            this.tree = tree;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            int x = e.getX();
            int y = e.getY();
            int row = tree.getRowForLocation(x, y);
            TreePath path = tree.getPathForRow(row);
            //TreePath  path = tree.getSelectionPath();
            if (path != null) {
                CheckNode node = (CheckNode) path.getLastPathComponent();
                boolean isSelected = !(node.isSelected());
                node.setSelected(isSelected);
                if (node.getSelectionMode() == CheckNode.DIG_IN_SELECTION) {
                    if (isSelected) {
                        tree.expandPath(path);
                    } else {
                        tree.collapsePath(path);
                    }
                }
                ((DefaultTreeModel) tree.getModel()).nodeChanged(node);
                // I need revalidate if node is root.  but why?
                if (row == 0) {
                    tree.revalidate();
                    tree.repaint();
                }
            }
            selectedNodesC = new ArrayList();
            getUserSelect(rootC);
            for (int i = 0; i < selectedNodesC.size(); i++) {
                System.out.print(selectedNodesC.get(i) + " ");
            }
            System.out.println("");
            this.tree.repaint();
        }
    }

    class ButtonActionListener implements ActionListener {

        CheckNode root;
        JTextArea textArea;

        ButtonActionListener(final CheckNode root,
                final JTextArea textArea) {
            this.root = root;
            this.textArea = textArea;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            Enumeration enumOne = root.breadthFirstEnumeration();
            while (enumOne.hasMoreElements()) {
                CheckNode node = (CheckNode) enumOne.nextElement();
                if (node.isSelected()) {
                    TreeNode[] nodes = node.getPath();
                    textArea.append("\n" + nodes[0].toString());
                    for (int i = 1; i < nodes.length; i++) {
                        textArea.append("/" + nodes.toString());
                    }
                }
            }
        }
    }
    //这个方法是用来返回一个用户所选择的树形结构

    public CheckNode rebuildTree(CheckNode userRoot, CheckNode userNode) {
        if (userNode.getChildCount() == 0) {
            if (userNode == userRoot) {
                return null;
            }
            if (!userNode.isSelected()) {
                userNode.removeFromParent();
            }
        } else if (userNode.getChildCount() > 0) {

            for (int i = 0; i < userNode.getChildCount(); i++) {
                rebuildTree(userRoot, (CheckNode) userNode.getChildAt(i));
            }

        }

        return userNode;
    }
    //打印一个根结点，也就是树

    public void printNode(CheckNode node) {
        if (node.getChildCount() == 0) {
            System.out.print(node.toString() + " ");
        } else if (node.getChildCount() > 0) {
            for (int i = 0; i < node.getChildCount(); i++) {
                printNode((CheckNode) node.getChildAt(i));
            }
        }
    }
    //存储用户选择的节点

    public void getUserSelect(CheckNode node) {
        //ArrayList result = new ArrayList();
        EConcept ec = (EConcept) node.getUserObject();
        // LPApp.lpModel.getInterestConcepts(LPApp.getApplication().user.learner).remove(ec);
        selectedNodesC.remove(ec.getCid());
        if (node.getChildCount() == 0 && node.isSelected()) {
            selectedNodesC.add(ec.getCid());
        } else if (node.getChildCount() > 0) {
            if (node.isSelected()) {
                selectedNodesC.add(ec.getCid());
            }
            for (int i = 0; i < node.getChildCount(); i++) {
                getUserSelect((CheckNode) node.getChildAt(i));
            }
        }
        //return result;
    }
}
